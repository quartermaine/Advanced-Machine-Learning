install.packages("visNetwork")
library(visNetwork)
dag = hc(asia,restart = 3,score="AIC",sampl)
dag = hc(asia,restart = 3,score="AIC")
dag = hc(asia,restart = 3,score="aic")
plot.network <- function(structure, ht = "400px"){
nodes.uniq <- unique(c(structure$arcs[,1], structure$arcs[,2]))
nodes <- data.frame(id = nodes.uniq,
label = nodes.uniq,
color = "darkturquoise",
shadow = TRUE)
edges <- data.frame(from = structure$arcs[,1],
to = structure$arcs[,2],
arrows = "to",
smooth = TRUE,
shadow = TRUE,
color = "black")
return(visNetwork(nodes, edges, height = ht, width = "100%"))
}
plot.network(dag)
dag
#---------------------------------------------------------------
dag2 = hc(asia,restart = 3,score="bic")
plot.network(dag2)
?hc
asia
head(asia)
?asia
bn.fti(hc(asia),asia)
bn.fit(hc(asia),asia)
plot,network(bn.fit(hc(asia),asia))
plot.network(bn.fit(hc(asia),asia))
bn.fit(hc(asia),asia)
plot.network(hc(asia))
?asia
#---------------------------------------------------------------
initial_dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
dag2=hc(asia,restart=2,score="aci")
#---------------------------------------------------------------
initial_dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
dag3=hc(asia,restart=2,score="loglik")
plot.network(dag3)
dag3=hc(asia,restart=2,score="aic")
plot.network(dag3)
dag3=hc(asia,restart=2,score="bic")
plot.network(dag3)
dag3=hc(asia,restart=2,score="aic-g")
plot.network(dag3)
?hc
dag3=hc(asia,restart=2,score="ai")
dag3=hc(asia,restart=2,score="bde",max.iter = 20)
plot.network(dag3)
#---------------------------------------------------------------
arcs(dag)
?cpdag
cpdag(dag)
vstructs(dag)
arcs(dag)
vstructs(dag)
cpdag(dag)
all.equal(dag,dag2)
all.equal(dag,dag3)
library(gRain)
?bn.fit
bn.fti(asia,method="lf")
bn.fit(asia,method="lf")
bn.fit(dag3,method="lf")
dag3
?bn.fit
bn.fit(initial_dag)
bn.fit(initial_dag,data=asia)
# create an empty graph
structure <- empty.graph(c("D","T","L","B","A","S","X","E")
# create an empty graph
structure <- empty.graph(c("D","T","L","B","A","S","X","E"))
plot.network(structure)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed to make your partition reproducible
set.seed(123)
indx <- sample(seq_len(nrow(mtcars)), size = smp_size)
train <- mtcars[indx, ]
indx <- sample(seq_len(nrow(mtcars)), size = smp_size)
indx <- sample(nrow(mtcars), size = smp_size)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
smp_size
nrow(asia)
sample(5000,400)
sample(5000,4000)
sample(5000,4000)
indx <- sample(nrow(asia), size = smp_size)
indx <- sample(seq_along(nrow(asia)), size = smp_size)
indx <- sample(nrow(asia), size = smp_size)
train <- mtcars[indx, ]
test <- mtcars[-indx, ]
dim(train)
bn.model<-bn.fit(hc(train),data=train,method = "kj")
train
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- mtcars[indx, ]
head(train)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asis[-indx, ]
bn.model<-bn.fit(hc(train),data=train,method = "kj")
?bn.fit
bn.model<-bn.fit(initial_dag,data=train,method = "kj")
bn.model<-bn.fit(hc(asia),data=train,method = "kj")
?as.grain
?compile
?setFinding
?bn.fit
?bn.fit
?hc
?mb
?arima
rep(1:12)
rep(1:12,2)
v
?querygrain
library(gRain)
?querygrain
?setFinding
head(asia)
?asia
??asia
?compile
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asis[-indx, ]
train <- asia[indx, ]
test <- asia[-indx, ]
bn.model<-bn.fit(hc(asia),data=train,method = "kj")
library(bnlearn)
data("asia")
library(Rgraphviz)
library(visNetwork)
plot.network <- function(structure, ht = "400px"){
# https://www.r-bloggers.com/bayesian-network-example-with-the-bnlearn-package/
nodes.uniq <- unique(c(structure$arcs[,1], structure$arcs[,2]))
nodes <- data.frame(id = nodes.uniq,
label = nodes.uniq,
color = "darkturquoise",
shadow = TRUE)
edges <- data.frame(from = structure$arcs[,1],
to = structure$arcs[,2],
arrows = "to",
smooth = TRUE,
shadow = TRUE,
color = "black")
return(visNetwork(nodes, edges, height = ht, width = "100%"))
}
#---------------------------------------------------------------
dag = hc(asia,restart = 3,score="aic")
dag
plot.network(dag)
arcs(dag)
vstructs(dag)
cpdag(dag)
#---------------------------------------------------------------
dag2 = hc(asia,restart = 3,score="bic")
dag2
plot.network(dag2)
arcs(dag2)
vstructs(dag2)
cpdag(dag2)
#---------------------------------------------------------------
initial_dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
dag3=hc(asia,restart=2,score="bde",max.iter = 20)
plot.network(dag3)
arcs(dag3)
vstructs(dag3)
cpdag(dag3)
#---------------------------------------------------------------
arcs(dag)
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asia[-indx, ]
bn.model<-bn.fit(hc(asia),data=train,method = "kj")
?as.grain
?bn.fit
bn.model<-bn.fit(hc(asia),data=train,method = "mle")
setFinding(bn.model)
setFinding(bn.model,nodes="S",states=c("yes","no"))
querygrain(bn.model)
querygrain(as.grain(bn.model))
setFinding(as.grain(bn.model),nodes="S",states=c("yes","no"))
setFinding(as.grain(bn.model),nodes="S",states=c("yes"))
?setFinding
?querygrain
test
test[1,]
test[1,-2]
setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[1,-2])
?setFinding
??setFinding
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asia[-indx, ]
bn.model<-bn.fit(hc(asia),data=train,method = "mle")
querygrain(as.grain(bn.model),nodes="")
library(bnlearn)
data("asia")
library(Rgraphviz)
library(visNetwork)
plot.network <- function(structure, ht = "400px"){
# https://www.r-bloggers.com/bayesian-network-example-with-the-bnlearn-package/
nodes.uniq <- unique(c(structure$arcs[,1], structure$arcs[,2]))
nodes <- data.frame(id = nodes.uniq,
label = nodes.uniq,
color = "darkturquoise",
shadow = TRUE)
edges <- data.frame(from = structure$arcs[,1],
to = structure$arcs[,2],
arrows = "to",
smooth = TRUE,
shadow = TRUE,
color = "black")
return(visNetwork(nodes, edges, height = ht, width = "100%"))
}
#---------------------------------------------------------------
dag = hc(asia,restart = 3,score="aic")
dag
plot.network(dag)
arcs(dag)
vstructs(dag)
cpdag(dag)
#---------------------------------------------------------------
dag2 = hc(asia,restart = 3,score="bic")
dag2
plot.network(dag2)
arcs(dag2)
vstructs(dag2)
cpdag(dag2)
#---------------------------------------------------------------
initial_dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
dag3=hc(asia,restart=2,score="bde",max.iter = 20)
plot.network(dag3)
arcs(dag3)
vstructs(dag3)
cpdag(dag3)
#---------------------------------------------------------------
arcs(dag)
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asia[-indx, ]
bn.model<-bn.fit(hc(asia),data=train,method = "mle")
querygrain(as.grain(bn.model),nodes="")
setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[1,-2])
?querygrain
querygrain(as.grain(bn.model),nodes=c("S"))
setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[3,-2])
querygrain(as.grain(bn.model),nodes=c("S"))
setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[15,-2])
querygrain(as.grain(bn.model),nodes=c("S"),type="marginal")
dim(test)
setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[150,-2])
querygrain(as.grain(bn.model),nodes=c("S"),type="marginal")
bn.model<-setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[150,-2])
querygrain(as.grain(bn.model),nodes=c("S"),type="marginal")
?as.grain
bn.model<-setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[150,-2])
querygrain(as.grain(bn.model),nodes=c("S"),type="marginal")
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asia[-indx, ]
bn.model<-bn.fit(hc(asia),data=train,method = "mle")
bn.model<-bn.fit(hc(train),data=train,method = "mle")
bn.model<-setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[150,-2])
querygrain(as.grain(bn.model),nodes=c("S"),type="marginal")
querygrain(bn.model,nodes=c("S"),type="marginal")
bn.model<-setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[500,-2])
querygrain(bn.model,nodes=c("S"),type="marginal")
bn.model<-setFinding(as.grain(bn.model),nodes=c("A","T","L","B","E","X","D"),states=test[500,-2])
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D"),states=test[500,-2])
querygrain(bn.model,nodes=c("S"),type="marginal")
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D"),states=test[500,-2])
querygrain(bn.model,nodes=c("S"),type="marginal")
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D"),states=test[999,-2])
querygrain(bn.model,nodes=c("S"),type="marginal")
?bn.fit
bn.model<-bn.fit(hc(train),data=train,method = "mle")
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[999,-2])
querygrain(bn.model,nodes=c("S"),type="marginal")
bn.model<-bn.fit(hc(train),data=train,method = "mle")
bn.model<-as.grain(bn.model)
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[999,-2])
querygrain(bn.model,nodes=c("S"),type="marginal")
test[999,-2]
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[800,-2])
test[800,-2]
querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat<-matrix(0,dim(test)[1],2)
pred_mat<-matrix(0,dim(test)[1],2)
for(i in 1:dim(test)[1]){
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[i,-2])
pred_mat[i,]<-querygrain(bn.model,nodes=c("S"),type="marginal")
}
for(i in 1:dim(test)[1]){
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
print(q)
}
pred_mat<-matrix(0,dim(test)[1],2)
for(i in 1:dim(test)[1]){
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
pred_mat
pmax(pred_mat)
which.max(pred_mat[1,])
which.max(pred_mat[30,])
pred_mat<-matrix(0,yes=dim(test)[1],no=2)
pred_mat<-matrix(0,dim(test)[1],2)
colnames(pred_mat)<-c("no","yes")
for(i in 1:dim(test)[1]){
bn.model<-setFinding(bn.model,nodes=c("A","T","L","B","E","X","D")
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
head(pred_mat)
prop.table(test[,-2],pred_mat[,2])
prop.table(table(test[,-2],pred_mat[,2]))
test[,-2]
prop.table(table(test[,2],pred_mat[,2]))
head(test[,-2])
colnames(test[,-2])
pred_mat<-matrix(0,dim(test)[1],2)
colnames(pred_mat)<-c("no","yes")
for(i in 1:dim(test)[1]){
bn.model<-setFinding(bn.model,nodes=colnames(test[,-2])
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
head(pred_mat)
prop.table(table(test[,2],pred_mat[,2]))
sum(pred_mat[,2]==test[,2])
pred_mat[,2
pred_mat[,2]
test[,2]
sum("yes"==test[,2])
sum("yes"==test[,2])/dim(test)[1]
bn.model<-bn.fit(hc(train,restart = 3,score="aic"),data=train,method = "mle")
bn.model<-as.grain(bn.model)
pred_mat<-matrix(0,dim(test)[1],2)
colnames(pred_mat)<-c("no","yes")
for(i in 1:dim(test)[1]){
bn.model<-setFinding(bn.model,nodes=colnames(test[,-2])
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
head(pred_mat)
prop.table(table(test[,2],pred_mat[,2]))
sum("yes"==test[,2])/dim(test)[1]
pred_mat<-matrix(0,dim(test)[1],2)
colnames(pred_mat)<-c("no","yes")
for(i in 1:dim(test)[1]){
bn.model<-setEvidence(bn.model,nodes=colnames(test[,-2])
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
head(pred_mat)
prop.table(table(test[,2],pred_mat[,2]))
sum("yes"==test[,2])/dim(test)[1]
plot.network(bn.model)
bn.model<-bn.fit(hc(train,restart = 3,score="aic"),data=train,method = "mle")
plot.network(bn.model)
library(bnlearn)
data("asia")
library(Rgraphviz)
library(visNetwork)
plot.network <- function(structure, ht = "400px"){
# https://www.r-bloggers.com/bayesian-network-example-with-the-bnlearn-package/
nodes.uniq <- unique(c(structure$arcs[,1], structure$arcs[,2]))
nodes <- data.frame(id = nodes.uniq,
label = nodes.uniq,
color = "darkturquoise",
shadow = TRUE)
edges <- data.frame(from = structure$arcs[,1],
to = structure$arcs[,2],
arrows = "to",
smooth = TRUE,
shadow = TRUE,
color = "black")
return(visNetwork(nodes, edges, height = ht, width = "100%"))
}
#---------------------------------------------------------------
dag = hc(asia,restart = 3,score="aic")
dag
plot.network(dag)
arcs(dag)
vstructs(dag)
cpdag(dag)
#---------------------------------------------------------------
dag2 = hc(asia,restart = 3,score="bic")
dag2
plot.network(dag2)
arcs(dag2)
vstructs(dag2)
cpdag(dag2)
#---------------------------------------------------------------
initial_dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
dag3=hc(asia,restart=2,score="bde",max.iter = 20)
plot.network(dag3)
arcs(dag3)
vstructs(dag3)
cpdag(dag3)
#---------------------------------------------------------------
arcs(dag)
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asia[-indx, ]
bn.model<-bn.fit(hc(train,restart = 3,score="aic"),data=train,method = "mle")
plot.network(bn.model)
bn.model<-bn.fit(hc(train,restart = 3,score="aic"),data=train,method = "mle")
renderGraph(bn.model)
plot(bn.fit())
class(bn.fit)
plot(bn.model)
bn.fit.barchart(bn.model)
dag<-hc(train,restart = 3,score="aic")
plot.network(dag)
bn.model<-bn.fit(dag,data=train,method = "mle")
dag.fit<-hc(train,restart = 3,score="aic")
plot.network(dag)
bn.model<-bn.fit(dag.fit,data=train,method = "mle")
bn.model<-compile(as.grain(bn.model))
pred_mat<-matrix(0,dim(test)[1],2)
colnames(pred_mat)<-c("no","yes")
for(i in 1:dim(test)[1]){
bn.model<-setEvidence(bn.model,nodes=colnames(test[,-2])
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
head(pred_mat)
prop.table(table(test[,2],pred_mat[,2]))
sum("yes"==test[,2])/dim(test)[1]
library(gRain)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(asia))
## set the seed
set.seed(123)
indx <- sample(nrow(asia), size = smp_size)
train <- asia[indx, ]
test <- asia[-indx, ]
dag.fit<-hc(train,restart = 3,score="aic")
plot.network(dag)
bn.model<-bn.fit(dag.fit,data=train,method = "mle")
bn.model<-compile(as.grain(bn.model))
pred_mat<-matrix(0,dim(test)[1],2)
colnames(pred_mat)<-c("no","yes")
for(i in 1:dim(test)[1]){
bn.model<-setEvidence(bn.model,nodes=colnames(test[,-2])
,states=test[i,-2])
q<-querygrain(bn.model,nodes=c("S"),type="marginal")
pred_mat[i,]<-(q$S)
}
head(pred_mat)
prop.table(table(test[,2],pred_mat[,2]))
sum("yes"==test[,2])/dim(test)[1]
setwd("~/Courses/Advanced ML/Labs/Lab1")
